"""
Django settings for OnlineFoodOrderingSystem project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from django.contrib import messages
from django.shortcuts import redirect
import os
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api
from decouple import config


DEBUG = os.getenv('DEBUG', 'False') == 'True'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9zkexpg)%iy@z87z9aah@@^d81@y4*8$!+$#kj_)40qmkp@bp#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',  
    '127.0.0.1',  
    'foodordering-rwp7.onrender.com'  # âœ… Replace this with your Render domain
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'food_ordering',
    'cloudinary',
    'cloudinary_storage',

]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'OnlineFoodOrderingSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'OnlineFoodOrderingSystem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(default='sqlite:///db.sqlite3')  # Change this on Render
}

def admin_login_redirect(get_response):
    def middleware(request):
        if request.path.startswith('/admin/') and not request.user.is_staff:
            messages.error(request, "You don't have permission to access this page.")
            return redirect('home')
        return get_response(request)
    return middleware

MIDDLEWARE.append('OnlineFoodOrderingSystem.settings.admin_login_redirect')

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")  
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PAYSTACK_PUBLIC_KEY = "pk_test_f328575f8f9f690f5ed43786a9c5c456c277719b"
PAYSTACK_SECRET_KEY = "sk_test_a380dda6a29099c572c9a3c5034425240036c5ee"
PAYSTACK_VERIFY_URL = "https://api.paystack.co/transaction/verify/"


# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'chibuzorprince68@gmail.com'  # Replace with your email
EMAIL_HOST_PASSWORD = '@soulhacker123'  # Use an App Password, NOT your real password!



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# Add this line ðŸ‘‡
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # <-- This is missing


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login/'


MEDIA_URL = "/media/"  # âœ… This keeps profile images working
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


FOOD_IMAGES_URL = "/food_images/"  # âœ… Food images
FOOD_IMAGES_ROOT = os.path.join(BASE_DIR, "food_images")


STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]


# âœ… Correct Cloudinary Configuration
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME'),  # âœ… Use correct env variable
    'API_KEY': config('CLOUDINARY_API_KEY'),
    'API_SECRET': config('CLOUDINARY_API_SECRET'),
}

cloudinary.config( 
    cloud_name=CLOUDINARY_STORAGE['CLOUD_NAME'], 
    api_key=CLOUDINARY_STORAGE['API_KEY'], 
    api_secret=CLOUDINARY_STORAGE['API_SECRET'], 
    secure=True
)

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'